/*
 * Copyright 2022 Jaya Surya Thotapalli
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.jayasuryat.dowel.processor

import com.squareup.kotlinpoet.ClassName

/**
 * Util methods for all the backing providers like PreviewParamProviders generated by Dowel, and
 * user pre-defined PreviewParamProviders annotated with @[com.jayasuryat.dowel.annotation.ConsiderForDowel]
 *
 * @see [com.jayasuryat.dowel.annotation.DowelList]
 * @see [com.jayasuryat.dowel.annotation.ConsiderForDowel]
 */
internal object BackingProvider {

    /**
     * Returns a string which could be used as the name of a property in Dowel generated
     * PreviewParameterProvider class to store references of other [List] types.
     *
     * The string would be in the following format '&lt;Relative name of class&gt;List'
     * where the name would be considered based on the nesting of class. For example
     * mapEntryList for Map.Entry class, and personList for Person class
     */
    fun listPropertyNameFor(name: ClassName): String {
        val relativeName = name.relativeClassName.replaceFirstChar { char -> char.lowercaseChar() }
        return "${relativeName}List"
    }
}
