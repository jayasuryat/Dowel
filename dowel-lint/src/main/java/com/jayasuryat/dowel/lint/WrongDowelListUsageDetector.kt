/*
 * Copyright 2022 Jaya Surya Thotapalli
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.jayasuryat.dowel.lint

import com.android.tools.lint.detector.api.*
import com.intellij.psi.PsiAnnotation
import org.jetbrains.uast.UClass
import org.jetbrains.uast.UElement

@Suppress("UnstableApiUsage")
internal class WrongDowelListUsageDetector : Detector(), SourceCodeScanner {

    override fun applicableAnnotations(): List<String> {
        return listOf(AnnotationNames.DowelList)
    }

    override fun isApplicableAnnotationUsage(type: AnnotationUsageType): Boolean {
        return type == AnnotationUsageType.DEFINITION
    }

    override fun visitAnnotationUsage(
        context: JavaContext,
        element: UElement,
        annotationInfo: AnnotationInfo,
        usageInfo: AnnotationUsageInfo,
    ) {

        val parent: UClass = element.uastParent as? UClass ?: return

        val dowelAnnotation: PsiAnnotation? = parent.annotations
            .firstOrNull { annotation -> annotation.qualifiedName == "com.jayasuryat.dowel.annotation.Dowel" }

        // Can't apply @DowelList if @Dowel is not applied, and rest of the check would be taken
        // care of with @Dowel lint checks.
        if (dowelAnnotation == null) {

            context.report(
                issue = NonDowelClassIssue.Definition,
                scope = element,
                location = context.getLocation(element),
                message = NonDowelClassIssue.MESSAGE,
            )
        }
    }

    internal object NonDowelClassIssue {

        internal const val ISSUE_ID: String = "NonDowel-DowelListClass"

        internal const val MESSAGE: String =
            "@DowelList annotation can only be applied to classes already annotated with @Dowel annotation."

        internal val Definition: Issue = Issue.create(
            id = ISSUE_ID,
            briefDescription = MESSAGE,
            explanation = """
                    @DowelList annotation can only be applied to classes already annotated with @Dowel annotation.
                    @DowelList repurposes instances of PreviewParameterProvider generated by @Dowel
                    to provide instances for list provider generated from @DowelList annotation.
                    """,
            category = Category.CORRECTNESS,
            priority = 6,
            severity = Severity.ERROR,
            implementation = Implementation(
                WrongDowelListUsageDetector::class.java,
                Scope.JAVA_FILE_SCOPE
            )
        )
    }

    companion object {

        val ISSUES: Array<Issue> = arrayOf(NonDowelClassIssue.Definition)
    }
}
